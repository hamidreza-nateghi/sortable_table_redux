{"ast":null,"code":"import _objectSpread from \"/Users/ata/Projects/hamid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/ata/Projects/hamid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar initialState = []; // put initial state aside, sometimes it might be big, not just some empty array\n\nvar todos = function todos() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [].concat(_toConsumableArray(state), [{\n        id: action.id,\n        name: action.payload.name,\n        protocol: action.payload.protocol,\n        port: action.payload.port,\n        rule: action.payload.rule,\n        status: action.payload.status,\n        groups: action.payload.groups\n      }]);\n    // You could also do like this\n    // return [\n    //   ...state,\n    //   {\n    //     id: action.id,\n    //     ...action.payload,\n    //   }\n    // ]\n\n    case 'SORT_TODO':\n      var sortByKey = function sortByKey(key) {\n        return function (a, b) {\n          return a[key] > b[key];\n        };\n      };\n\n      return state.sort(sortByKey('name'));\n\n    case 'TOGGLE_TODO':\n      return state.map(function (todo) {\n        return todo.id === action.id ? _objectSpread({}, todo, {\n          completed: !todo.completed\n        }) : todo;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default todos;","map":{"version":3,"sources":["/Users/ata/Projects/hamid/src/redux/reducers/todos.js"],"names":["initialState","todos","state","action","type","id","name","payload","protocol","port","rule","status","groups","sortByKey","key","a","b","sort","map","todo","completed"],"mappings":";;AAAA,IAAMA,YAAY,GAAG,EAArB,C,CACA;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,0CACKF,KADL,IAEE;AACEG,QAAAA,EAAE,EAAEF,MAAM,CAACE,EADb;AAEEC,QAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP,CAAeD,IAFvB;AAGEE,QAAAA,QAAQ,EAAEL,MAAM,CAACI,OAAP,CAAeC,QAH3B;AAIEC,QAAAA,IAAI,EAAEN,MAAM,CAACI,OAAP,CAAeE,IAJvB;AAKEC,QAAAA,IAAI,EAAEP,MAAM,CAACI,OAAP,CAAeG,IALvB;AAMEC,QAAAA,MAAM,EAAER,MAAM,CAACI,OAAP,CAAeI,MANzB;AAOEC,QAAAA,MAAM,EAAET,MAAM,CAACI,OAAP,CAAeK;AAPzB,OAFF;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACF,SAAK,WAAL;AACE,UAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG;AAAA,eAAI,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAUD,CAAC,CAACD,GAAD,CAAD,GAASE,CAAC,CAACF,GAAD,CAApB;AAAA,SAAJ;AAAA,OAArB;;AACA,aAAOZ,KAAK,CAACe,IAAN,CAAWJ,SAAS,CAAC,MAAD,CAApB,CAAP;;AACF,SAAK,aAAL;AACE,aAAOX,KAAK,CAACgB,GAAN,CAAU,UAAAC,IAAI;AAAA,eAClBA,IAAI,CAACd,EAAL,KAAYF,MAAM,CAACE,EAApB,qBACSc,IADT;AACeC,UAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AADhC,aAEID,IAHe;AAAA,OAAd,CAAP;;AAKF;AACE,aAAOjB,KAAP;AAjCJ;AAmCD,CApCD;;AAsCA,eAAeD,KAAf","sourcesContent":["const initialState = [];\n// put initial state aside, sometimes it might be big, not just some empty array\n\nconst todos = (state = initialState, action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          name: action.payload.name,\n          protocol: action.payload.protocol,\n          port: action.payload.port,\n          rule: action.payload.rule,\n          status: action.payload.status,\n          groups: action.payload.groups\n        }\n\n      ];\n      // You could also do like this\n      // return [\n      //   ...state,\n      //   {\n      //     id: action.id,\n      //     ...action.payload,\n      //   }\n      // ]\n    case 'SORT_TODO':\n      const sortByKey = key => (a, b) => a[key] > b[key]\n      return state.sort(sortByKey('name'));\n    case 'TOGGLE_TODO':\n      return state.map(todo =>\n        (todo.id === action.id)\n          ? { ...todo, completed: !todo.completed }\n          : todo\n      );\n    default:\n      return state\n  }\n};\n\nexport default todos\n"]},"metadata":{},"sourceType":"module"}